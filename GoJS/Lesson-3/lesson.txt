Switch
default выполняется когда ни один case не сработал
break обязателен, если оставить - будет продолжать перебирать и остальные тоже сработают.
case может использовать выражения case b+1:
case 3:
case 5:

console.log(0);
выводит данные в консоль.
замена alert, alert - тупо.

Циклы:
while:
использовать энкремент,
while..

переменная += 2 инкрементируем на 2.
переменная++ - инкремент на 1.

while (true){} - бесконечный цикл.
{break; - выход из цикла, наступление события}

do while -  как миниму один раз выполняется, потом проверяеть.
do{
то, что должно выполнится один раз
}
while
пока не выполнится условие

у for можно не задавать условие выхода, можно пользоваться break
!value - если value = 0. Отрицание. Нету value
if (value) - если есть value
!Nan - true
!!NaN - false

continue - продолжжить, например Если переменная %2 - то продолжжаем.

В тринарном операторе нельзя break и continue

МЕТКИ ЦИКЛОВ
Можно использовать имя цикла OUTER: for() {}
Например если нужно из внутреннего цикла выйти из него же и родительского тоже.

ПРЕ и ПОСТ ИНКРЕМЕНТ ПОЧИТАТЬ.

ФЦНКЦИИ
Набор комманд с определенным именем.
локальные переменные видны только внутри функции
глобальные переменные пересекуться даже если 2 js подключаются одновременно.
Доступ к глобальным переменным
window.переменная
global.переменная

Функции возвращают значение при помощи return
рекурсия

Функция без return вернет undefined
Называть их нужно понятно.
showMassege
checkPermission
createForm

Первое слово - глагол


/**найти минимальное число из 2х)*/
/**Тринарным оператором внутри функции
 * return a < b ? b : a;
 * или mathMin MathMax
 * */
/**функциональные выражения - можно присвоить переменной функцию.
 * например чтобы не писать consoleLog, а писать print вместо нее
 *
 */

переменная - ссылка на данные в области памяти
функция, присвоенная переменной начинает быть видимой только после того, как ее присвоили

Желательно присваивать функции переменным чтобы они не торчали сверху и не засоряли область видимости.
functrion всегда переносится наверх поэтому нужно использовать анонимные функции.
function expression и function declaration (не надо использовать) - узнать.
Переменные тоже поднимаются вверх интерпретатором, поэтому нужно все переменные обьявлять с самого верха.
функция - тоже значение,

learn javascript.ru





